# -*- coding: utf-8 -*-
"""Lote_de_prueba_TP_Listas_y_Arboles.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1R6yO_CJAIYUn7IgU36_LsmDGNpHAMzJQ
"""

################################################################################
############################OPERACION treePlot##################################
################################################################################

from TP3_ListasArboles_Entregar import*

from graphviz import Digraph

class NodoArbolDeCanciones(NodoArbolDeCanciones):

  def treePlot(self, dot):
    if self.tieneIzquierdo():
      dot.node(str(self.izquierdo.interprete), str(self.izquierdo.interprete)+"\n"+str(self.izquierdo.canciones))
      dot.edge(str(self.interprete), str(self.izquierdo.interprete))
      self.izquierdo.treePlot(dot)
    else:
      dot.node("None"+str(self.interprete)+"l", "None")
      dot.edge(str(self.interprete), "None"+str(self.interprete)+"l")
    if self.tieneDerecho():
      dot.node(str(self.derecho.interprete), str(self.derecho.interprete)+"\n"+str(self.derecho.canciones))
      dot.edge(str(self.interprete), str(self.derecho.interprete))
      self.derecho.treePlot(dot)
    else:
      dot.node("None"+str(self.interprete)+"r", "None")
      dot.edge(str(self.interprete), "None"+str(self.interprete)+"r")

class ArbolDeCanciones(ArbolDeCanciones):
  
  def treePlot(self, fileName='tree'):
    if not self.estaVacio():
      treeDot = Digraph()
      treeDot.node(str(self.raiz.interprete), str(self.raiz.interprete+"\n"+str(self.raiz.canciones)))
      self.raiz.treePlot(treeDot)
      treeDot.render(fileName, view=True)

################################################################################
##############################IMPORTANTE!!!!!!##################################
################################################################################

################################################################################
####RECUREDEN RESPETAR LOS NOMBRES EN LAS ESTRUCTURAS Y OPERACIONES############# 
#######################SEGUN DICE EL ENUNCIADO################################## 
################################################################################

##Estas son las cosas que deben respetar

#Nombres de variables Estructura TDA NodoArbolDeCanciones:
# - variable "interprete" = Nombre de interprete
# - variable "canciones" = Lista de canciones
# - variable "izquierdo" = Subarbol izquierdo
# - variable "derecho" = Subarbol derecho

#Nombres de Operaciones TDA NodoArbolDeCanciones:
# - tieneIzquierdo
# - tieneDerecho

#Nombre de variables Estructura TDA ArbolDeCanciones:
# - variable "raiz" = Raiz del arbol

#Nombres de Operaciones TDA NodoArbolDeCanciones:
# - Todos los nombres en el enunciado
# - estaVacio

#Nombres de funciones TDA Lista:
# - append = Agregar al final
# - len = Longitud de la Lista
# - get = Obtener elemento de posicion de la lista


################################################################################
#############CARGA DE ARBOL Y GENERACION DE VARIABLES PARA LA PRUEBA############

archivoCanciones = open("TP_Listas_y_Arboles_Datos_de_prueba.csv")

arbolDeCancionesTest = ArbolDeCanciones()

cancionesInterpretes = {}
cancionesCargadas = set()
for lineaArchivo in archivoCanciones:
  lineaArchivo = lineaArchivo[:-1].split(",")
  interprete = lineaArchivo[-1]
  cancionesCargadas = cancionesCargadas.union(set(lineaArchivo[:-1]))
  if interprete not in cancionesInterpretes:
    cancionesInterpretes[interprete] = set(lineaArchivo[:-1])
  else:
    cancionesInterpretes[interprete] = cancionesInterpretes[interprete].union(set(lineaArchivo[:-1]))
  canciones = Lista()
  for cancion in lineaArchivo[:-1]:
    canciones.append(cancion)
  arbolDeCancionesTest.insertarCanciones(canciones, interprete)
archivoCanciones.close()

################################################################################
################################################################################

#arbolDeCancionesTest.treePlot("arbolCompleto")

################################################################################
###################LISTA DE INTERPRETES CARGADOS################################

interpretes = list(cancionesInterpretes.keys())
print("Las nombres de los interpretes cargados segun la entrada son:")
for interprete in interpretes:
  print(interprete)

################################################################################
################################################################################

################################################################################
###################PRUEBA DE OPERACION interpretesDeCancion#####################

print("\nBusqueda de canciones que no existen en el arbol:")
cancionesNoEstan = ["Mi Buenos Aires querido","La bamba","Adios Nonino"]
for cancion in cancionesNoEstan:
  print("Interprete de:",cancion,arbolDeCancionesTest.interpretesDeCancion(cancion))

print("\nBusqueda de canciones que estan en el arbol con un único intérprete:")
cancionesIntUnico = ["Blues de la libertad","Balada del diablo y la muerte","Jamming"]
for cancion in cancionesIntUnico:
  print("Interprete de:",cancion,arbolDeCancionesTest.interpretesDeCancion(cancion))

print("\nBusqueda de canciones que estan en el arbol con dos intérpretes:")
cancionesIntUnico = ["Little wing","Billy","The guns of Brixton","Voodoo child"]
for cancion in cancionesIntUnico:
  print("Interprete de:",cancion,arbolDeCancionesTest.interpretesDeCancion(cancion))


################################################################################
################################################################################

################################################################################
###################PRUEBA DE OPERACION buscarCanciones##########################

print("\nBusqueda de interpretes que no existen en el arbol:")
interpretesNoEstan = ["Carlos Gardel","Fito Paez","Lito Nebia"]
for interprete in interpretesNoEstan:
  listaInterpretes = Lista()
  listaInterpretes.append(interprete)
  print("Canciones de",interprete,"en el arbol:",arbolDeCancionesTest.buscarCanciones(listaInterpretes))

print("\nBusqueda de interpretes que están en el arbol pero no comparten canciones:")
interpretesConDistintas = ["Pappo","Luis A. Spinetta","The Clash"]
listaInterpretes = Lista()
print("\nBuscados de a uno:")
for interprete in interpretesConDistintas:
  listaActual = Lista()
  listaActual.append(interprete)
  print("El interprete",interprete,"tiene las canciones:",arbolDeCancionesTest.buscarCanciones(listaActual))
  listaInterpretes.append(interprete)
print("\nLas canciones compartidas por",listaInterpretes,"son:",arbolDeCancionesTest.buscarCanciones(listaInterpretes))

print("\nBusqueda con interpretes que comparten canciones:")
listaPares = [["Sumo","Lou Reed"],
              ["Sumo","Bob Marley and The Wailers"],
              ["Pappo","Jimi Hendrix"],
              ["Divididos","The doors"],
              ["Divididos","Jimi Hendrix"],
              ["The Clash","Los fabulosos cadillacs"],
              ["The Beatles","Los fabulosos cadillacs"]]
for par in listaPares:
  listaInterpretes = Lista()
  for interprete in par:
    listaInterpretes.append(interprete)
  print("Las canciones compartidas por",listaInterpretes,"son:",arbolDeCancionesTest.buscarCanciones(listaInterpretes))

################################################################################
################################################################################

################################################################################
###############PRUEBA DE OPERACION cantidadTotalInterpretes#####################

print("\nInterpretes con la palabra 'hola':")
print("Cantidad de interpretes ingresados:",len(list(filter(lambda x:"hola" in x,interpretes)))) 
print("Cantidad de interpretes según el arbol:",arbolDeCancionesTest.cantidadTotalInterpretes("hola")) 

print("\nInterpretes con la palabra 'The':")
print("Cantidad de interpretes ingresados:",len(list(filter(lambda x:"The" in x,interpretes)))) 
print("Cantidad de interpretes según el arbol:",arbolDeCancionesTest.cantidadTotalInterpretes("The")) 

print("\nInterpretes con la palabra 'La':")
print("Cantidad de interpretes ingresados:",len(list(filter(lambda x:"La" in x,interpretes)))) 
print("Cantidad de interpretes según el arbol:",arbolDeCancionesTest.cantidadTotalInterpretes("La"))

################################################################################
################################################################################

################################################################################
###############PRUEBA DE OPERACION raizBalanceada###############################

print("\nBalanceo de la raíz del arbol:",arbolDeCancionesTest.raizBalanceada())

################################################################################
################################################################################

################################################################################
###############PRUEBA DE OPERACION paginasEnNivel###############################

print("\nCanciones en cada nivel del arbol:")
for nivel in range(10):
  print("Canciones en nivel:",nivel,"=",arbolDeCancionesTest.cancionesEnNivel(nivel).len())

################################################################################
################################################################################

################################################################################
###############PRUEBA DE OPERACION interpretesConMasCanciones###################

print("\nIntenpretes con mayor cantidad de canciones:")
for cantidadMinima in range(1,30,5):
  print("Hay",arbolDeCancionesTest.interpretesConMasCanciones(cantidadMinima),"interpretes con",cantidadMinima,"canciones o mas")

################################################################################
################################################################################

################################################################################
###################PRUEBA DE OPERACION internosAlfabetico#######################

print("\nInterpretes en nodos internos en orden alfabetico:")
interpretes.sort()
print("Todos los interpretes ingresados:", interpretes)
print("Interpretes en nodos internos",arbolDeCancionesTest.internosAlfabetico())

################################################################################
################################################################################

################################################################################
###############PRUEBA DE OPERACION eliminarCancion##############################

print("\nEliminamos todas las canciones de 'Sumo' una por una con la operacion eliminarCancion:")

print("\nCanciones de cada uno de los interpretes antes de borrar:")
for interprete in interpretes:
  listaInt = Lista()
  listaInt.append(interprete)
  cancionesDeInterprete = list(cancionesInterpretes[interprete])
  cancionesDeInterpreteArbol = arbolDeCancionesTest.buscarCanciones(listaInt)
  print("El interprete",interprete,"tiene",len(cancionesDeInterprete),"canciones distintas ingresadas segun datos de entrada.")
  print("El interprete",interprete,"tiene",cancionesDeInterpreteArbol.len(),"canciones distintas segun el arbol.") 

for cancion in cancionesInterpretes["Sumo"]:
  arbolDeCancionesTest.eliminarCancion(cancion)

print("\nCanciones de cada uno de los interpretes despues de borrar:")
for interprete in interpretes:
  listaInt = Lista()
  listaInt.append(interprete)
  cancionesDeInterprete = list(cancionesInterpretes[interprete])
  cancionesDeInterpreteArbol = arbolDeCancionesTest.buscarCanciones(listaInt)
  print("El interprete",interprete,"tiene",len(cancionesDeInterprete),"canciones distintas ingresadas segun datos de entrada.")
  print("El interprete",interprete,"tiene",cancionesDeInterpreteArbol.len(),"canciones distintas segun el arbol.") 

################################################################################
################################################################################

################################################################################
###############PRUEBA DE OPERACION eliminarInterprete##############################

print("\nEliminamos el interprete 'The Beatles' eliminarInterprete:")

arbolDeCancionesTest.eliminarInterprete("The Beatles")

print("\nCanciones de cada uno de los interpretes despues de borrar:")
for interprete in interpretes:
  listaInt = Lista()
  listaInt.append(interprete)
  cancionesDeInterprete = list(cancionesInterpretes[interprete])
  cancionesDeInterpreteArbol = arbolDeCancionesTest.buscarCanciones(listaInt)
  print("El interprete",interprete,"tiene",len(cancionesDeInterprete),"canciones distintas ingresadas segun datos de entrada.")
  print("El interprete",interprete,"tiene",cancionesDeInterpreteArbol.len(),"canciones distintas segun el arbol.") 

################################################################################
################################################################################

